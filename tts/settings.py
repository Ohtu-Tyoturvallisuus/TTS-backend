"""
tts/settings.py

Django settings for tts project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
import environ
from azure.identity import DefaultAzureCredential
from azure.keyvault.secrets import SecretClient


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environment variables
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# Initialize the Key Vault client
key_vault_name = os.getenv('KEY_VAULT_NAME')
key_vault_uri = f"https://{key_vault_name}.vault.azure.net"
credential = DefaultAzureCredential()
client = SecretClient(vault_url=key_vault_uri, credential=credential)

def get_secret(secret_name):
    return client.get_secret(secret_name).value

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret('SECRET-KEY')

# Get speech key and service region from .env
SPEECH_KEY = get_secret('SPEECH-KEY')
SPEECH_SERVICE_REGION = get_secret('SPEECH-SERVICE-REGION')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    os.getenv('LOCAL_IP'),
    os.getenv('EXPO_METRO_IP'),
    '127.0.0.1',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api.middleware.access_token_middleware.AccessTokenMiddleware'
]
ROOT_URLCONF = 'tts.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'tts', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tts.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('DB_NAME', default='tts_db'),
        'USER': env('DB_USER', default='tts_user'),
        'PASSWORD': env('DB_PASSWORD', default='tts_password'),
        'HOST': env('DB_HOST', default='localhost'),
        'PORT': env('DB_PORT', default='5432'),
    }
}

if os.environ.get('GITHUB_WORKFLOW'):
    DATABASES = {
        'default': {
           'ENGINE': 'django.db.backends.postgresql',
           'NAME': 'github_actions',
           'USER': 'postgres',
           'PASSWORD': 'postgres',
           'HOST': '127.0.0.1',
           'PORT': '5432',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_L10N = True

USE_TZ = True

TIME_ZONE = 'Europe/Helsinki'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Audio files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Azure Storage settings
AZURE_STORAGE_ACCOUNT_NAME = get_secret('AZURE-STORAGE-ACCOUNT-NAME')
AZURE_STORAGE_ACCOUNT_KEY = get_secret('AZURE-STORAGE-ACCOUNT-KEY')
AZURE_CONTAINER_NAME = get_secret('AZURE-CONTAINER-NAME')

# Azure text translator settings
TRANSLATOR_KEY = get_secret('TRANSLATOR-KEY')
TRANSLATOR_SERVICE_REGION = get_secret('TRANSLATOR-SERVICE-REGION')
TRANSLATOR_ENDPOINT = get_secret('TRANSLATOR-ENDPOINT')

# Entra ID settings
CLIENT_ID = get_secret('CLIENT-ID')
TENANT_ID = get_secret('TENANT-ID')

# ERP settings
ERP_CLIENT_ID = get_secret('ERP-CLIENT-ID')
ERP_CLIENT_SECRET = get_secret('ERP-CLIENT-SECRET')
ERP_TENANT_ID = get_secret('ERP-TENANT-ID')
ERP_RESOURCE = get_secret('ERP-RESOURCE')
ERP_SANDBOX_RESOURCE = get_secret('ERP-SANDBOX-RESOURCE')
